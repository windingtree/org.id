/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IOrgIdDelegatesInterface extends ethers.utils.Interface {
  functions: {
    "addDelegates(bytes32,string[])": FunctionFragment;
    "getDelegates(bytes32)": FunctionFragment;
    "removeDelegates(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addDelegates",
    values: [BytesLike, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegates",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDelegates",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addDelegates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeDelegates",
    data: BytesLike
  ): Result;

  events: {
    "OrgIdDelegatesAdded(bytes32,string[])": EventFragment;
    "OrgIdDelegatesRemoved(bytes32,string[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OrgIdDelegatesAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrgIdDelegatesRemoved"): EventFragment;
}

export type OrgIdDelegatesAddedEvent = TypedEvent<
  [string, string[]] & { orgId: string; delegates: string[] }
>;

export type OrgIdDelegatesRemovedEvent = TypedEvent<
  [string, string[]] & { orgId: string; delegates: string[] }
>;

export class IOrgIdDelegates extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IOrgIdDelegatesInterface;

  functions: {
    addDelegates(
      orgId: BytesLike,
      dids: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addDelegates(bytes32,string[])"(
      orgId: BytesLike,
      dids: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getDelegates(
      orgId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string[]] & { dids: string[] }>;

    "getDelegates(bytes32)"(
      orgId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string[]] & { dids: string[] }>;

    "removeDelegates(bytes32)"(
      orgId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeDelegates(bytes32,string[])"(
      orgId: BytesLike,
      dids: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addDelegates(
    orgId: BytesLike,
    dids: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addDelegates(bytes32,string[])"(
    orgId: BytesLike,
    dids: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getDelegates(orgId: BytesLike, overrides?: CallOverrides): Promise<string[]>;

  "getDelegates(bytes32)"(
    orgId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "removeDelegates(bytes32)"(
    orgId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeDelegates(bytes32,string[])"(
    orgId: BytesLike,
    dids: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addDelegates(
      orgId: BytesLike,
      dids: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addDelegates(bytes32,string[])"(
      orgId: BytesLike,
      dids: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    getDelegates(
      orgId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getDelegates(bytes32)"(
      orgId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "removeDelegates(bytes32)"(
      orgId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeDelegates(bytes32,string[])"(
      orgId: BytesLike,
      dids: string[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OrgIdDelegatesAdded(bytes32,string[])"(
      orgId?: BytesLike | null,
      delegates?: null
    ): TypedEventFilter<
      [string, string[]],
      { orgId: string; delegates: string[] }
    >;

    OrgIdDelegatesAdded(
      orgId?: BytesLike | null,
      delegates?: null
    ): TypedEventFilter<
      [string, string[]],
      { orgId: string; delegates: string[] }
    >;

    "OrgIdDelegatesRemoved(bytes32,string[])"(
      orgId?: BytesLike | null,
      delegates?: null
    ): TypedEventFilter<
      [string, string[]],
      { orgId: string; delegates: string[] }
    >;

    OrgIdDelegatesRemoved(
      orgId?: BytesLike | null,
      delegates?: null
    ): TypedEventFilter<
      [string, string[]],
      { orgId: string; delegates: string[] }
    >;
  };

  estimateGas: {
    addDelegates(
      orgId: BytesLike,
      dids: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addDelegates(bytes32,string[])"(
      orgId: BytesLike,
      dids: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getDelegates(
      orgId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDelegates(bytes32)"(
      orgId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "removeDelegates(bytes32)"(
      orgId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeDelegates(bytes32,string[])"(
      orgId: BytesLike,
      dids: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addDelegates(
      orgId: BytesLike,
      dids: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addDelegates(bytes32,string[])"(
      orgId: BytesLike,
      dids: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getDelegates(
      orgId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDelegates(bytes32)"(
      orgId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "removeDelegates(bytes32)"(
      orgId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeDelegates(bytes32,string[])"(
      orgId: BytesLike,
      dids: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
