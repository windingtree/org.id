/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface IOrgIdDelegatesInterface extends utils.Interface {
  functions: {
    "addDelegates(bytes32,string[])": FunctionFragment;
    "getDelegates(bytes32)": FunctionFragment;
    "removeDelegates(bytes32)": FunctionFragment;
    "removeDelegates(bytes32,string[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addDelegates"
      | "addDelegates(bytes32,string[])"
      | "getDelegates"
      | "getDelegates(bytes32)"
      | "removeDelegates(bytes32)"
      | "removeDelegates(bytes32,string[])"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addDelegates",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addDelegates(bytes32,string[])",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegates",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegates(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDelegates(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDelegates(bytes32,string[])",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "addDelegates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addDelegates(bytes32,string[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegates(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeDelegates(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeDelegates(bytes32,string[])",
    data: BytesLike
  ): Result;

  events: {
    "OrgIdDelegatesAdded(bytes32,string[])": EventFragment;
    "OrgIdDelegatesRemoved(bytes32,string[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OrgIdDelegatesAdded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OrgIdDelegatesAdded(bytes32,string[])"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrgIdDelegatesRemoved"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OrgIdDelegatesRemoved(bytes32,string[])"
  ): EventFragment;
}

export interface OrgIdDelegatesAddedEventObject {
  orgId: string;
  delegates: string[];
}
export type OrgIdDelegatesAddedEvent = TypedEvent<
  [string, string[]],
  OrgIdDelegatesAddedEventObject
>;

export type OrgIdDelegatesAddedEventFilter =
  TypedEventFilter<OrgIdDelegatesAddedEvent>;

export interface OrgIdDelegatesRemovedEventObject {
  orgId: string;
  delegates: string[];
}
export type OrgIdDelegatesRemovedEvent = TypedEvent<
  [string, string[]],
  OrgIdDelegatesRemovedEventObject
>;

export type OrgIdDelegatesRemovedEventFilter =
  TypedEventFilter<OrgIdDelegatesRemovedEvent>;

export interface IOrgIdDelegates extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IOrgIdDelegatesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addDelegates(
      orgId: PromiseOrValue<BytesLike>,
      dids: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "addDelegates(bytes32,string[])"(
      orgId: PromiseOrValue<BytesLike>,
      dids: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getDelegates(
      orgId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { dids: string[] }>;

    "getDelegates(bytes32)"(
      orgId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { dids: string[] }>;

    "removeDelegates(bytes32)"(
      orgId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "removeDelegates(bytes32,string[])"(
      orgId: PromiseOrValue<BytesLike>,
      dids: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addDelegates(
    orgId: PromiseOrValue<BytesLike>,
    dids: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "addDelegates(bytes32,string[])"(
    orgId: PromiseOrValue<BytesLike>,
    dids: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getDelegates(
    orgId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getDelegates(bytes32)"(
    orgId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "removeDelegates(bytes32)"(
    orgId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "removeDelegates(bytes32,string[])"(
    orgId: PromiseOrValue<BytesLike>,
    dids: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addDelegates(
      orgId: PromiseOrValue<BytesLike>,
      dids: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addDelegates(bytes32,string[])"(
      orgId: PromiseOrValue<BytesLike>,
      dids: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    getDelegates(
      orgId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getDelegates(bytes32)"(
      orgId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "removeDelegates(bytes32)"(
      orgId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeDelegates(bytes32,string[])"(
      orgId: PromiseOrValue<BytesLike>,
      dids: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OrgIdDelegatesAdded(bytes32,string[])"(
      orgId?: PromiseOrValue<BytesLike> | null,
      delegates?: null
    ): OrgIdDelegatesAddedEventFilter;
    OrgIdDelegatesAdded(
      orgId?: PromiseOrValue<BytesLike> | null,
      delegates?: null
    ): OrgIdDelegatesAddedEventFilter;

    "OrgIdDelegatesRemoved(bytes32,string[])"(
      orgId?: PromiseOrValue<BytesLike> | null,
      delegates?: null
    ): OrgIdDelegatesRemovedEventFilter;
    OrgIdDelegatesRemoved(
      orgId?: PromiseOrValue<BytesLike> | null,
      delegates?: null
    ): OrgIdDelegatesRemovedEventFilter;
  };

  estimateGas: {
    addDelegates(
      orgId: PromiseOrValue<BytesLike>,
      dids: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "addDelegates(bytes32,string[])"(
      orgId: PromiseOrValue<BytesLike>,
      dids: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getDelegates(
      orgId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDelegates(bytes32)"(
      orgId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "removeDelegates(bytes32)"(
      orgId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "removeDelegates(bytes32,string[])"(
      orgId: PromiseOrValue<BytesLike>,
      dids: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addDelegates(
      orgId: PromiseOrValue<BytesLike>,
      dids: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "addDelegates(bytes32,string[])"(
      orgId: PromiseOrValue<BytesLike>,
      dids: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getDelegates(
      orgId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDelegates(bytes32)"(
      orgId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "removeDelegates(bytes32)"(
      orgId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "removeDelegates(bytes32,string[])"(
      orgId: PromiseOrValue<BytesLike>,
      dids: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
